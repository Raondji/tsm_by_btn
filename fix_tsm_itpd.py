# -*- coding: utf-8 -*-
"""FIX_TSM+ITPD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iBDvLwcpC3GrDD7-nWZJzbrJMq2nCiJL
"""

# ==========================================================
# üß† TSM by BTN - Hybrid AI Talent Scoring Model (FIXED + AUTO-BALANCED)
# ==========================================================

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

def run_hybrid_model(df):
    print("üöÄ Running Hybrid AI Model (Rule-Based + Predictive) ...\n")

    # ==========================================================
    # 2Ô∏è‚É£ Generate Rule-Based Score + Disqualification Rules
    # ==========================================================
    def compute_rule_score(row):
        # --- RULE DISQUALIFIKASI ---
        if (
            str(row.get("Pernah_Judi_Online", "")).strip() == "Pernah"
        ) or (
            str(row.get("SKCK", "")).strip() == "Ada"
        ) or (
            str(row.get("Pernah_Narkoba", "")).strip() == "Pernah"
        ):
            return 0  # langsung tidak lolos, tidak ikut perhitungan
        # if row["IPK"] < 3.0:
        #     return -999  # langsung tidak lolos
        # if row["SKCK"] == "Ya":  # catatan kriminal
        #     return -999
        # if "Pernah_Narkoba" in row and row["Pernah_Narkoba"] == "Ya":
        #     return -999

        # --- RULE PENILAIAN ---
        score = 0

        # IPK
        if row["IPK"] < 3.0:
            score += 0
        elif row["IPK"] >= 3.75:
            score += 10
        elif row["IPK"] >= 3.5:
            score += 8
        else:
            score += 6

        # TOEFL
        if row["TOEFL"] >= 600:
            score += 10
        elif row["TOEFL"] >= 550:
            score += 8
        elif row["TOEFL"] >= 450:
            score += 6
        else:
            score += 4

        # Sertifikasi
        if row["Sertifikasi"] == "Ada":
            score += 10

        # SKCK (sudah difilter di atas)
        # score += 5

        # Judi Online
        # if row["Pernah_Judi_Online"] == "Ya":
        #     score -= 25

        # Pengalaman kerja
        if row["Pernah_Kerja"] == "Ya":
            score += min(row["Lama_Pengalaman_Kerja"] * 2, 10)

        # Organisasi
        if row["Pernah_Ikut_Organisasi"] == "Ya":
            score += 10

        # Expected Salary
        if row["Expected_Salary"] <= 7000000:
            score -= 2

        # Pendidikan
        if row["Ijazah"] == "S2":
            score += 10
        elif row["Ijazah"] == "S1":
            score += 8

        # Umur
        if 22 <= row["Umur"] <= 26:
            score += 5

        return score

    # Terapkan rule-based scoring
    df["Rule_Score"] = df.apply(compute_rule_score, axis=1)

    # ==========================================================
    # 3Ô∏è‚É£ Generate Dummy Target (Kinerja Historis) untuk ML
    # ==========================================================
    np.random.seed(42)
    df["Kinerja_Prediksi"] = np.where(
        (df["IPK"] > 3.25) &
        (df["TOEFL"] > 450) &
        (df["Sertifikasi"] == "Ada"),
        "Baik", "Kurang"
    )

    # ==========================================================
    # 4Ô∏è‚É£ Prepare Data for Machine Learning
    # ==========================================================
    # Hanya kandidat valid (Rule_Score != -999)
    df_ml = df[df["Rule_Score"] != -999].copy()

    # Encode target numerik: 1 = Baik / Lolos, 0 = Kurang / Pertimbangan
    df_ml["Target_ML"] = df_ml["Kinerja_Prediksi"].apply(lambda x: 1 if x=="Baik" else 0)

    # Encode categorical features
    label_cols = ["Universitas", "Jurusan", "Ijazah", "Sertifikasi", "SKCK",
                "Pernah_Judi_Online", "Pernah_Kerja", "Pernah_Ikut_Organisasi"]

    le = LabelEncoder()
    for col in label_cols:
        df_ml[col] = le.fit_transform(df_ml[col])

    # ==========================================================
    # üß© FIX: Label Encoding hanya untuk kolom kategorikal valid
    # ==========================================================
    object_cols = df_ml.select_dtypes(include=['object']).columns.tolist()
    print("Kolom kategorikal yang belum dikodekan:", object_cols)

    exclude_cols = ["Nama", "Kinerja_Prediksi"]  # jangan encode nama & target
    encode_cols = [col for col in object_cols if col not in exclude_cols]

    for col in encode_cols:
        df_ml[col] = le.fit_transform(df_ml[col].astype(str))

    # ==========================================================
    # üîÅ Pastikan Target ML punya dua kelas
    # ==========================================================
    print("\nDistribusi awal target ML:")
    print(df_ml["Target_ML"].value_counts())

    if df_ml["Target_ML"].nunique() == 1:
        print("‚ö† Semua data punya label sama, menambahkan variasi dummy agar model bisa belajar dua kelas.")
        idx_sample = df_ml.sample(1, random_state=42).index
        df_ml.loc[idx_sample, "Target_ML"] = 1 - df_ml["Target_ML"].iloc[0]

    print("\nDistribusi target ML (setelah koreksi):")
    print(df_ml["Target_ML"].value_counts())

    # ==========================================================
    # 5Ô∏è‚É£ Train Predictive Model (Random Forest)
    # ==========================================================
    X = df_ml.drop(columns=["Nama", "Rule_Score", "Kinerja_Prediksi", "Target_ML"])
    y = df_ml["Target_ML"]

    # üß© Pastikan setiap kelas minimal punya 2 anggota
    class_counts = df_ml["Target_ML"].value_counts()
    for label, count in class_counts.items():
        if count < 2:
            print(f"‚ö† Kelas {label} hanya punya {count} sampel, menambahkan duplikat agar bisa di-stratify.")
            sample_idx = df_ml[df_ml["Target_ML"] == label].sample(1, random_state=42)
            df_ml = pd.concat([df_ml, sample_idx.copy()], ignore_index=True)
            X = df_ml.drop(columns=["Nama", "Rule_Score", "Kinerja_Prediksi", "Target_ML"])
            y = df_ml["Target_ML"]

    # Split data dengan stratifikasi yang aman
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.25, random_state=42, stratify=y
    )

    model = RandomForestClassifier(n_estimators=200, random_state=42)
    model.fit(X_train, y_train)

    # Evaluasi
    y_pred = model.predict(X_test)
    print("\n‚úÖ Predictive Model trained successfully!\n")
    print("üîπ Akurasi:", round(accuracy_score(y_test, y_pred) * 100, 2), "%")
    print("\nClassification Report:\n", classification_report(y_test, y_pred))

    # # ==========================================================
    # # 6Ô∏è‚É£ Combine Rule-Based Score + Predictive Score
    # # ==========================================================
    # df_ml["Predictive_Score"] = model.predict_proba(X)[:, 1] * 100

    # df_ml["Hybrid_Score"] = 0.6 * df_ml["Rule_Score"] + 0.4 * df_ml["Predictive_Score"]
    # df_ml["Total_Score"] = df_ml["Rule_Score"] + df_ml["Predictive_Score"]

    # def determine_status(hybrid_score):
    #     return "Lolos" if hybrid_score >= 60 else "Pertimbangan"

    # df_ml["Status"] = df_ml["Total_Score"].apply(determine_status)
    # df_ml["Hybrid_Ranking"] = df_ml["Hybrid_Score"].rank(ascending=False, method="dense").astype(int)

    # # ==========================================================
    # # 7Ô∏è‚É£ Feature Importance
    # # ==========================================================
    # importances = pd.DataFrame({
    #     "Feature": X.columns,
    #     "Importance": model.feature_importances_
    # }).sort_values(by="Importance", ascending=False)

    # plt.figure(figsize=(10,6))
    # plt.barh(importances["Feature"], importances["Importance"])
    # plt.gca().invert_yaxis()
    # plt.title("Feature Importance - Predictive Component (Hybrid AI)")
    # plt.xlabel("Importance")
    # # plt.show()

    # # ==========================================================
    # # 8Ô∏è‚É£ Simpan & Preview Hasil
    # # ==========================================================
    # df_ml_sorted = df_ml.sort_values("Hybrid_Score", ascending=False)
    # output_columns = ["Nama", "Status", "Rule_Score", "Predictive_Score",
    #                 "Hybrid_Score", "Total_Score", "Hybrid_Ranking"]

    # df_output = df_ml_sorted[output_columns]
    # # df_output.to_csv("TSM_BTN_HybridAI_Results.csv", index=False)

    # # print("\n‚úÖ Hybrid AI Talent Scoring selesai!")
    # # print("üìÇ Hasil disimpan ke: TSM_BTN_HybridAI_Results.csv")
    # # print(f"\nüìä Statistik Status:")
    # # print(df_ml_sorted["Status"].value_counts())
    # # print(f"\nüèÜ Top 10 Kandidat:")
    # # print(df_output.head(50).to_string(index=False))
    # return df_output
    # ==========================================================
    # 6Ô∏è‚É£ Combine Rule-Based Score + Predictive Score
    # ==========================================================
    df_ml["Predictive_Score"] = model.predict_proba(X)[:, 1] * 100

    df_ml["Hybrid_Score"] = 0.6 * df_ml["Rule_Score"] + 0.4 * df_ml["Predictive_Score"]
    df_ml["Total_Score"] = df_ml["Rule_Score"] + df_ml["Predictive_Score"]

    # ==========================================================
    # ‚úÖ Tentukan status akhir: hanya "Lolos" dan "Tidak Lolos"
    # ==========================================================
    def determine_status(total_score):
        return "Lolos" if total_score >= 60 else "Tidak Lolos"

    df_ml["Status"] = df_ml["Total_Score"].apply(determine_status)
    df_ml["Hybrid_Ranking"] = df_ml["Hybrid_Score"].rank(ascending=False, method="dense").astype(int)

    # ==========================================================
    # 7Ô∏è‚É£ Feature Importance
    # ==========================================================
    importances = pd.DataFrame({
        "Feature": X.columns,
        "Importance": model.feature_importances_
    }).sort_values(by="Importance", ascending=False)

    plt.figure(figsize=(10,6))
    plt.barh(importances["Feature"], importances["Importance"])
    plt.gca().invert_yaxis()
    plt.title("Feature Importance - Predictive Component (Hybrid AI)")
    plt.xlabel("Importance")
    # plt.show()

    # ==========================================================
    # 8Ô∏è‚É£ Simpan & Preview Hasil
    # ==========================================================
    df_ml_sorted = df_ml.sort_values("Hybrid_Score", ascending=False)
    output_columns = ["Nama", "Status", "Rule_Score", "Predictive_Score",
                      "Hybrid_Score", "Total_Score", "Hybrid_Ranking"]

    df_output = df_ml_sorted[output_columns]

    return df_output